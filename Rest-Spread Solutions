function filterOutOdds() {
  var nums = Array.prototype.slice.call(arguments);
  return nums.filter(function(num) {
    return num % 2 === 0
  });
}

const filterOutOdds = arguements => [...arguements].filter(num => num % 2 === 0)

findMin
function findMin(){
    return Math.min(...arguments)
}

mergeObjects
function mergeObjects(ob1, ob2){
    return {...ob1, ...ob2}
}

doubleAndReturnArgs
function doubleAndReturnArgs(arr,...add){
    return [...arr,...add.map(i => i*2)]
}

Slice and Dice!
/** remove a random element in the items array
and return a new array without that item. */

const removeRandom = items => {
    let ind = Math.floor(Math.random()*items.length)
    return [...items.slice(0,ind),...items.slice(ind+1)]
}

/** Return a new array with every item in array1 and array2. */

const extend = (arr,arr2) => {
    return [...arr,...arr2]
}

/** Return a new object with all the keys and values
from obj and a new key/value pair */

const addKeyVal = (obj, key, val) => ({...obj, [key]:val})


/** Return a new object with a key removed. */

const removeKey = (obj, key) => {
    delete obj[key]
    return obj
}


/** Combine two objects and return a new object. */

const combine = (obj, obj2) => ({...obj, ...obj2})


/** Return a new object with a modified key and value. */

const combine = (obj, key, val) => ({...obj, [key]:val})
